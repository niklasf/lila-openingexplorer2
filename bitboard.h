#ifndef BITBOARD_H_
#define BITBOARD_H_

#include <stdint.h>
#include <popcntintrin.h>
#include <immintrin.h>
#include <assert.h>

void bb_print(uint64_t bb);

#define bb_popcount(bb) _mm_popcnt_u64((bb))

#define bb_pext(bb, mask) _pext_u64((bb), (mask))

#if defined(__GNUC__)
static inline uint8_t bb_lsb(uint64_t bb) {
    assert(bb);
    return __builtin_ctzll(bb);
}

static inline uint8_t bb_msb(uint64_t bb) {
    assert(bb);
    return 63 - __builtin_clzll(bb);
}
#else
#error "bb_lsb and bb_msb missing"
#endif

static inline uint8_t bb_poplsb(uint64_t *bb) {
    uint8_t square = bb_lsb(*bb);
    *bb &= *bb - 1;
    return square;
}

static inline uint8_t bb_popmsb(uint64_t *bb) {
    uint8_t square = bb_msb(*bb);
    *bb ^= 1ULL << square;
    return square;
}

#define BB_VOID 0x0000000000000000ULL
#define BB_ALL  0xffffffffffffffffULL

#define BB_A1 0x0000000000000001ULL
#define BB_B1 0x0000000000000002ULL
#define BB_C1 0x0000000000000004ULL
#define BB_D1 0x0000000000000008ULL
#define BB_E1 0x0000000000000010ULL
#define BB_F1 0x0000000000000020ULL
#define BB_G1 0x0000000000000040ULL
#define BB_H1 0x0000000000000080ULL
#define BB_A2 0x0000000000000100ULL
#define BB_B2 0x0000000000000200ULL
#define BB_C2 0x0000000000000400ULL
#define BB_D2 0x0000000000000800ULL
#define BB_E2 0x0000000000001000ULL
#define BB_F2 0x0000000000002000ULL
#define BB_G2 0x0000000000004000ULL
#define BB_H2 0x0000000000008000ULL
#define BB_A3 0x0000000000010000ULL
#define BB_B3 0x0000000000020000ULL
#define BB_C3 0x0000000000040000ULL
#define BB_D3 0x0000000000080000ULL
#define BB_E3 0x0000000000100000ULL
#define BB_F3 0x0000000000200000ULL
#define BB_G3 0x0000000000400000ULL
#define BB_H3 0x0000000000800000ULL
#define BB_A4 0x0000000001000000ULL
#define BB_B4 0x0000000002000000ULL
#define BB_C4 0x0000000004000000ULL
#define BB_D4 0x0000000008000000ULL
#define BB_E4 0x0000000010000000ULL
#define BB_F4 0x0000000020000000ULL
#define BB_G4 0x0000000040000000ULL
#define BB_H4 0x0000000080000000ULL
#define BB_A5 0x0000000100000000ULL
#define BB_B5 0x0000000200000000ULL
#define BB_C5 0x0000000400000000ULL
#define BB_D5 0x0000000800000000ULL
#define BB_E5 0x0000001000000000ULL
#define BB_F5 0x0000002000000000ULL
#define BB_G5 0x0000004000000000ULL
#define BB_H5 0x0000008000000000ULL
#define BB_A6 0x0000010000000000ULL
#define BB_B6 0x0000020000000000ULL
#define BB_C6 0x0000040000000000ULL
#define BB_D6 0x0000080000000000ULL
#define BB_E6 0x0000100000000000ULL
#define BB_F6 0x0000200000000000ULL
#define BB_G6 0x0000400000000000ULL
#define BB_H6 0x0000800000000000ULL
#define BB_A7 0x0001000000000000ULL
#define BB_B7 0x0002000000000000ULL
#define BB_C7 0x0004000000000000ULL
#define BB_D7 0x0008000000000000ULL
#define BB_E7 0x0010000000000000ULL
#define BB_F7 0x0020000000000000ULL
#define BB_G7 0x0040000000000000ULL
#define BB_H7 0x0080000000000000ULL
#define BB_A8 0x0100000000000000ULL
#define BB_B8 0x0200000000000000ULL
#define BB_C8 0x0400000000000000ULL
#define BB_D8 0x0800000000000000ULL
#define BB_E8 0x1000000000000000ULL
#define BB_F8 0x2000000000000000ULL
#define BB_G8 0x4000000000000000ULL
#define BB_H8 0x8000000000000000ULL

#define BB_SQUARE(sq) (1ULL << sq)

#define BB_RANK_1 0x00000000000000ffULL
#define BB_RANK_2 0x000000000000ff00ULL
#define BB_RANK_3 0x0000000000ff0000ULL
#define BB_RANK_4 0x00000000ff000000ULL
#define BB_RANK_5 0x000000ff00000000ULL
#define BB_RANK_6 0x0000ff0000000000ULL
#define BB_RANK_7 0x00ff000000000000ULL
#define BB_RANK_8 0xff00000000000000ULL

#define BB_RANK(rank) (BB_RANK_1 << ((rank) * 8))

#define BB_BACKRANKS (BB_RANK_1 | BB_RANK_8)

#define BB_FILE_A 0x0101010101010101ULL
#define BB_FILE_B 0x0202020202020202ULL
#define BB_FILE_C 0x0404040404040404ULL
#define BB_FILE_D 0x0808080808080808ULL
#define BB_FILE_E 0x1010101010101010ULL
#define BB_FILE_F 0x2020202020202020ULL
#define BB_FILE_G 0x4040404040404040ULL
#define BB_FILE_H 0x8080808080808080ULL

#define BB_FILE(file) (BB_FILE_A << (file))

#define BB_DARK_SQUARES 0xaa55aa55aa55aa55ULL
#define BB_LIGHT_SQUARES 0x55aa55aa55aa55aaULL

#endif  // #ifndef BITBOARD_H_
